{"ast":null,"code":"export let AuthTypes = /*#__PURE__*/function (AuthTypes) {\n  AuthTypes[\"CREATE\"] = \"CREATE_USER\";\n  AuthTypes[\"LOGIN\"] = \"LOGIN\";\n  AuthTypes[\"LOGOUT\"] = \"LOGOUT\";\n  return AuthTypes;\n}({});\nexport const CONTEXT_STORAGE_KEY = \"auth\";\nconst getSessionExpireDate = () => {\n  const date = new Date();\n  date.setFullYear(date.getFullYear() + 1);\n  return date;\n};\nexport const getStorageContext = () => {\n  const raw = localStorage.getItem(CONTEXT_STORAGE_KEY);\n  return raw ? JSON.parse(raw) : undefined;\n};\nexport const authReducer = (state, action) => {\n  switch (action.type) {\n    case AuthTypes.CREATE:\n      const newState = {\n        users: [...state.users, action.payload],\n        session: {\n          email: action.payload.email,\n          expiredAt: getSessionExpireDate()\n        }\n      };\n      localStorage.setItem(CONTEXT_STORAGE_KEY, JSON.stringify(newState));\n      return newState;\n    case AuthTypes.LOGIN:\n      const findMatch = state.users.find(user => user.email === email && user.password === password);\n      if (!findMatch) {}\n      const newSession = {\n        email: findMatch.email,\n        expiredAt: getSessionExpireDate()\n      };\n      setSession(newSession);\n      localStorage.setItem(CONTEXT_STORAGE_KEY, JSON.stringify({\n        users,\n        session: newSession\n      }));\n      return {\n        users: state.users,\n        session: {}\n      };\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["AuthTypes","CONTEXT_STORAGE_KEY","getSessionExpireDate","date","Date","setFullYear","getFullYear","getStorageContext","raw","localStorage","getItem","JSON","parse","undefined","authReducer","state","action","type","CREATE","newState","users","payload","session","email","expiredAt","setItem","stringify","LOGIN","findMatch","find","user","password","newSession","setSession"],"sources":["/Users/manana/Documents/auth-test-task/src/context/authReducer.tsx"],"sourcesContent":["import { IUser, ISession, ActionMap, AuthContextStorageType } from \"./auth\";\n\nexport enum AuthTypes {\n  CREATE = \"CREATE_USER\",\n  LOGIN = \"LOGIN\",\n  LOGOUT = \"LOGOUT\",\n}\n\nexport const CONTEXT_STORAGE_KEY = \"auth\";\n\nconst getSessionExpireDate = () => {\n  const date = new Date();\n  date.setFullYear(date.getFullYear() + 1);\n  return date;\n};\n\nexport const getStorageContext = () => {\n  const raw = localStorage.getItem(CONTEXT_STORAGE_KEY);\n  return raw ? (JSON.parse(raw) as AuthContextStorageType) : undefined;\n};\n\ntype AuthPayload = {\n  [AuthTypes.CREATE]: IUser;\n  [AuthTypes.LOGIN]: {\n    email: string;\n    password: string;\n  };\n  [AuthTypes.LOGOUT]: {};\n};\n\nexport type AuthState = {\n  users: IUser[];\n  session: ISession | null;\n};\n\nexport type AuthActions = ActionMap<AuthPayload>[keyof ActionMap<AuthPayload>];\n\nexport const authReducer = (state: AuthState, action: AuthActions) => {\n  switch (action.type) {\n    case AuthTypes.CREATE:\n      const newState = {\n        users: [...state.users, action.payload],\n        session: {\n          email: action.payload.email,\n          expiredAt: getSessionExpireDate(),\n        },\n      };\n      localStorage.setItem(CONTEXT_STORAGE_KEY, JSON.stringify(newState));\n\n      return newState;\n    case AuthTypes.LOGIN:\n        const findMatch = state.users.find(\n            (user) => user.email === email && user.password === password\n          );\n          if (!findMatch) {\n\n          }\n\n            const newSession = {\n              email: findMatch.email,\n              expiredAt: getSessionExpireDate(),\n            };\n      \n            setSession(newSession);\n      \n            localStorage.setItem(\n              CONTEXT_STORAGE_KEY,\n              JSON.stringify({ users, session: newSession })\n            );\n\n      return { users: state.users, session: {}};\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAEA,WAAYA,SAAS,0BAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAATA,SAAS;EAAA,OAATA,SAAS;AAAA;AAMrB,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAEzC,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACjC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;EACvBD,IAAI,CAACE,WAAW,CAACF,IAAI,CAACG,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;EACxC,OAAOH,IAAI;AACb,CAAC;AAED,OAAO,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;EACrC,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAACT,mBAAmB,CAAC;EACrD,OAAOO,GAAG,GAAIG,IAAI,CAACC,KAAK,CAACJ,GAAG,CAAC,GAA8BK,SAAS;AACtE,CAAC;AAkBD,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAgB,EAAEC,MAAmB,KAAK;EACpE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKjB,SAAS,CAACkB,MAAM;MACnB,MAAMC,QAAQ,GAAG;QACfC,KAAK,EAAE,CAAC,GAAGL,KAAK,CAACK,KAAK,EAAEJ,MAAM,CAACK,OAAO,CAAC;QACvCC,OAAO,EAAE;UACPC,KAAK,EAAEP,MAAM,CAACK,OAAO,CAACE,KAAK;UAC3BC,SAAS,EAAEtB,oBAAoB,CAAC;QAClC;MACF,CAAC;MACDO,YAAY,CAACgB,OAAO,CAACxB,mBAAmB,EAAEU,IAAI,CAACe,SAAS,CAACP,QAAQ,CAAC,CAAC;MAEnE,OAAOA,QAAQ;IACjB,KAAKnB,SAAS,CAAC2B,KAAK;MAChB,MAAMC,SAAS,GAAGb,KAAK,CAACK,KAAK,CAACS,IAAI,CAC7BC,IAAI,IAAKA,IAAI,CAACP,KAAK,KAAKA,KAAK,IAAIO,IAAI,CAACC,QAAQ,KAAKA,QACtD,CAAC;MACD,IAAI,CAACH,SAAS,EAAE,CAEhB;MAEE,MAAMI,UAAU,GAAG;QACjBT,KAAK,EAAEK,SAAS,CAACL,KAAK;QACtBC,SAAS,EAAEtB,oBAAoB,CAAC;MAClC,CAAC;MAED+B,UAAU,CAACD,UAAU,CAAC;MAEtBvB,YAAY,CAACgB,OAAO,CAClBxB,mBAAmB,EACnBU,IAAI,CAACe,SAAS,CAAC;QAAEN,KAAK;QAAEE,OAAO,EAAEU;MAAW,CAAC,CAC/C,CAAC;MAEP,OAAO;QAAEZ,KAAK,EAAEL,KAAK,CAACK,KAAK;QAAEE,OAAO,EAAE,CAAC;MAAC,CAAC;IAC3C;MACE,OAAOP,KAAK;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}